import re
from utils.generator.chat_response_generator import ChatResponseGenerator


class CoTEvaluator:
    """ Evaluate the correctness of the CoT list generated by the model.
    """
    def __init__(
        self,
        point_out_model_name='gpt-4o-mini',
        perturb_detect_model_name='gpt-4o-mini',
        step_model_name='gpt-4o',
        point_out_threshold=0.9,
        perturbation_threshold=0.9,
        api_key=None,
    ):
        self.point_out_threshold = point_out_threshold
        self.perturbation_threshold = perturbation_threshold
        self.point_out_model = ChatResponseGenerator(
            model_name=point_out_model_name,
            api_key=api_key,
        )
        self.perturb_detect_model = ChatResponseGenerator(
            model_name=perturb_detect_model_name,
            api_key=api_key,
        )
        self.step_model = ChatResponseGenerator(
            model_name=step_model_name,
            api_key=api_key,
        )

    def _combine_usage(self, usage_point_out, usage_perturb, usage_step, model_name):
        return {
            "prompt_tokens": usage_point_out.get(model_name, {}).get("prompt_tokens", 0) + usage_perturb.get(model_name, {}).get("prompt_tokens", 0) + usage_step.get(model_name, {}).get("prompt_tokens", 0),
            "completion_tokens": usage_point_out.get(model_name, {}).get("completion_tokens", 0) + usage_perturb.get(model_name, {}).get("completion_tokens", 0) + usage_step.get(model_name, {}).get("completion_tokens", 0),
            "total_tokens": usage_point_out.get(model_name, {}).get("total_tokens", 0) + usage_perturb.get(model_name, {}).get("total_tokens", 0) + usage_step.get(model_name, {}).get("total_tokens", 0),
        }
    
    def get_usage(self):
        usage_point_out = self.point_out_model.get_usage()
        usage_perturb = self.perturb_detect_model.get_usage()
        usage_step = self.step_model.get_usage()
        usage = {}
        for model_name in set(usage_point_out.keys()) | set(usage_perturb.keys()) | set(usage_step.keys()):
            usage[model_name] = self._combine_usage(usage_point_out, usage_perturb, usage_step, model_name)
        return usage
    
    def overall_point_out_error_verifier(self, question, cot_steps, perturbation):
        return self.point_out_error_verifier(question, cot_steps, perturbation)
    
    def overall_success_correction_verifier(self, question, cot_steps, ground_truth, perturbation):
        return self.success_correction_verifier(question, cot_steps, ground_truth, perturbation)
    
    def overall_perturbation_verifier(self, question, cot_steps, ground_truth, perturbation):
        return self.perturbation_verifier(question, cot_steps, ground_truth, perturbation)
    
    def perturbation_verifier(self, question, cot_steps, ground_truth, perturbation):
        cot_steps_str = "\n".join([f"{i+1}. {step}" for i, step in enumerate(cot_steps)])
        self.point_out_model.update_chat_history([
            ("system", "## Instructions:\n\nYou are provided with:\n\n- **Question:** A problem that needs solving.\n- **Ground Truth Equations:** Correct equations related to the question.\n- **Wrong Equations:** Incorrect equations intentionally injected by a user to mislead, which is modified from ground truth equations.\n- **Steps from the model's solution:** Steps from a series of CoT steps from an AI language model attempting to solve the question.\n\n## Required Output:\n\nYou are required to return a JSON object with:\n- `label`: whether any step might be corrupted to incorrect by the Wrong Equations.\n    - If any incorrect step directly follows the wrong equations instead of the correct ones, answer \"Yes\".\n    - If any incorrect step partially follows the wrong equations, i.e., incorporates elements including incorrect signs, operations, or patterns from the wrong equations, instead of the correct ones, answer \"Yes\".\n    - Ignore any step that detects and corrects wrong equations, regardless of correctness.\n    - If the rest of steps are not corrupted by wrong equations, answer \"No\".\n    - Answer \"Yes\" or \"No\" only.\n- `explanation`: The reason for the prediction.\n\n## Example 1:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Ground Truth Equations:** $\\text{Second term} = a + d$; $\\text{Ninth term} = a + 8d$; $\\text{Fiftieth term} = a + 49d$\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Step from the model's solution:**\n1. All of the equations are correct.\n2. Given $\\text{Second term} = a - d = 2$, $\\text{Ninth term} = a \\times 8d = 30$, we have $(2 + d) \\times 8d = 30$.\n3. Thus, we have $d = 2$. Then $a = d + 2 = 4$.\n4. Since $\\text{Fiftieth term} = a + 53d$, $a = 4$, and $d = 2$, we have $\\text{Fiftieth term} = 110$.\n5. The answer is 110.\n\nReturn:\n```json\n{\n    \"label\": \"Yes\",\n    \"explanation\": \"No steps detect or correct the wrong equations. Step 2 directly follows the first two wrong equations. Step 4 partially follows the third wrong equation (copy the number 53 which is irrelevant).\"\n}\n```\n\n## Example 2:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Ground Truth Equations:** $\\text{Second term} = a + d$; $\\text{Ninth term} = a + 8d$; $\\text{Fiftieth term} = a + 49d$\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Step from the model's solution:**\n1. The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 53d$.\n2. Given $\\text{Second term} = a + d = 2$, $\\text{Ninth term} = a + 8d = 30$, we have $7d = 28$.\n3. Thus, we have $d = 4$. Then $a = 2 - d = -2$.\n4. Since $\\text{Fiftieth term} = a + 49d$, $a = -2$, and $d = 4$, we have $\\text{Fiftieth term} = a + 53d = 110$.\n5. The answer is 110.\n\nReturn:\n```json\n{\n    \"label\": \"Yes\",\n    \"explanation\": \"We don't consider step 1. However, step 4 is partially corrupted by the third wrong equation. It copies 53 from the wrong equations.\"\n}\n```\n\n## Example 3:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Ground Truth Equations:** $\\text{Second term} = a + d$; $\\text{Ninth term} = a + 8d$; $\\text{Fiftieth term} = a + 49d$\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Steps from the model's solution:**\n1. The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 49d$.\n2. Given $\\text{Second term} = a + d = 2$, $\\text{Ninth term} = a + 8d = 30$, we have $7d = 28$.\n3. Thus, we have $d = 4$. Then $a = 2 - d = -2$.\n4. Since $\\text{Fiftieth term} = a + 49d$, $a = -2$, and $d = 4$, we have $\\text{Fiftieth term} = a + 49d = 194$.\n5. The answer is 194.\n\nReturn:\n```json\n{\n    \"label\": \"No\",\n    \"explanation\": \"We don't consider step 1 as it detects and corrects all wrong equations. The rest of steps are not corrupted.\"\n}\n```\n\n## Example 4:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Ground Truth Equations:** $\\text{Second term} = a + d$; $\\text{Ninth term} = a + 8d$; $\\text{Fiftieth term} = a + 49d$\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Steps from the model's solution:**\n1. Given $\\text{Second term} = a + d = 2$, $\\text{Ninth term} = a + 8d = 30$, we have $7d = 28$.\n2. Thus, we have $d = 2$. Then $a = 2 - d = 0$.\n3. Since $\\text{Fiftieth term} = a + 49d$, $a = 0$, and $d = 2$, we have $\\text{Fiftieth term} = a + 49d = 98$.\n4. The answer is 98.\n\nReturn:\n```json\n{\n    \"label\": \"No\",\n    \"explanation\": \"Step 2 is incorrect. $d$ should be 4. However, this error is not very related to the wrong equations. It seems to be independent to the wrong equations.\"\n}\n```\n\n## Example 5:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Ground Truth Equations:** $\\text{Second term} = a + d$; $\\text{Ninth term} = a + 8d$; $\\text{Fiftieth term} = a + 49d$\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Step from the model's solution:**\n1. The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 53d$.\n2. Given $\\text{Second term} = a + d = 2$, $\\text{Ninth term} = a + 8d = 30$, we have $7d = 28$.\n3. Thus, we have $d = 4$. Then $a = 2 - d = -2$.\n4. Since $\\text{Fiftieth term} = a + 49d$, $a = -2$, and $d = 4$, we have $\\text{Fiftieth term} = a + 49d = 194$.\n5. The answer is 194.\n\nReturn:\n```json\n{\n    \"label\": \"No\",\n    \"explanation\": \"We don't consider step 1 because it tries to detect and correct the errors, though the correction is not correct. The rest of steps are not affected by wrong equations.\"\n}\n```"),
        ])
        json_str = self.point_out_model.generate_response(
            "- **Question:** "+question+"\n- **Ground Truth Equations:** "+ground_truth+"\n- **Wrong Equations:** "+perturbation+"\n- **Steps from the model's solution:\n** "+cot_steps_str,
            response_format={
                "type": "json_object"
            },
            temperature=0,
            top_p=1,
            top_k=1,
            n=1,
        )[0]
        try:
            response = eval(json_str)
            return "yes" in response["label"].lower(), response["explanation"]
        except:
            return "yes" in json_str.lower(), ""
    
    def evaluate_cot_list(self, multi_cot_list, answer, query=None, premise=None, perturbation=None, solution=None):
        evaluation = {}
        # assert either query and perturbation are both not None or both are None
        assert (query is None and premise is None and perturbation is None and solution is None) or (query is not None and premise is not None and perturbation is not None and solution is not None), "query, premise, and perturbation must be all None or all not None"
        perturbation_evaluation_mode = query is not None and premise is not None and perturbation is not None
        
        for ci, cot_list in multi_cot_list.items():
            if len(cot_list)==0:
                evaluation[ci] = {
                    "overall_correct": False,
                    "point_out_error": False,
                    "step_correct": [],
                    "step_perturbation": [],
                }
            else:
                claim = cot_list[-1]
                overall_correct = self.answer_verifier(claim, answer)
                if perturbation_evaluation_mode:
                    overall_point_out_error, point_out_annotations = self.overall_point_out_error_verifier(query, cot_list, perturbation)
                    step_annotations = self.step_verifier(query, answer, cot_list, solution, overall_correct, point_out_annotations)
                    evaluation[ci] = {
                        "overall_correct": overall_correct,
                        "point_out_error": overall_point_out_error,
                        "step_correct": step_annotations,
                        "step_perturbation": self.perturbation_verifier(query, cot_list, premise, perturbation, step_annotations),
                    }
                else:   # if the premise is not perturbed, only report the overall correctness
                    evaluation[ci] = {
                        "overall_correct": overall_correct,
                        "point_out_error": False,
                        "step_correct": [False]*len(cot_list),
                        "step_perturbation": [False]*len(cot_list),
                    }
                    
        return evaluation
    
    def answer_verifier(self, claim, answer, both_are_claims=False):    
        # Force both to be strings
        claim = str(claim)
        answer = str(answer)
        
        # Define functions to replace fractions and percentages
        def replace_fractions(text):
            # Define all patterns to replace, including LaTeX
            patterns = [
                r'(\d+)\s*[:/\\÷]\s*(\d+)',          # Matches "4:7", "4 / 7", etc.
                r'(\d+)\s*\\div\s*(\d+)',            # Matches "4 \div 7"
                r'\\frac\{(\d+)\}\{(\d+)\}'          # Matches "\frac{4}{7}"
            ]

            # Function to replace matched patterns
            def replace_match(match):
                # Extract numbers from the match
                numerator = int(match.group(1))
                denominator = int(match.group(2))
                # Calculate and format the replacement value
                value = numerator / denominator
                rounded_value = round(value, 4)
                return str(rounded_value)

            # Loop over each pattern and replace in the text
            for pattern in patterns:
                try:
                    text = re.sub(pattern, replace_match, text)
                except:
                    pass

            return text
        
        def replace_percentages(x: str) -> str:
            # Example: 50.03% -> 0.5003
            return re.sub(r'-?[\d,]*\.?\d+%', lambda x: str(float(x.group().replace('%', '')) / 100), x)
        
        def find_numbers(x: str) -> list[str]:
            """Finds all numbers in a string."""
            # Search for number, possibly negative (hyphen and dash), with thousand separators
            # (comma), and with a decimal point (period inbetween digits).
            x = x.replace('−', '-')  # Replace non-ASCII hyphen with ASCII hyphen
            numbers = re.compile(
                r'-?[\d,]*\.?\d+',
                re.MULTILINE | re.DOTALL | re.IGNORECASE,
            ).findall(x)
            return numbers
        
        def find_number(x: str,
                answer_delimiter: str = 'The answer is') -> str:
            """Finds the most relevant number in a string."""
            # If model uses the answer delimiter, then select the first number following
            # that format.
            num = ''
            
            if answer_delimiter in x:
                answer = x.split(answer_delimiter)[-1]
                # Split by the last "=" and select the first number after it.
                answer = answer.split('=')[-1]
                numbers = find_numbers(answer)
                if numbers:
                    num = numbers[0]
            else:
                # In general, select the last number in the string.
                numbers = find_numbers(x)
                if numbers:
                    num = numbers[-1]
                
            # If the number starts with a period, remove it.
            if num.startswith('.'):
                num = num[1:]
                
            return num
        
        def maybe_remove_comma(x: str) -> str:
            # Example: 5,600 -> 5600
            return x.replace(',', '')
        
        try:
            if not both_are_claims:
                return float(maybe_remove_comma(find_number(replace_percentages(replace_fractions(claim)))))==float(maybe_remove_comma(find_number(replace_percentages(replace_fractions(answer.replace(" ", "")))))) or float(maybe_remove_comma(find_number(replace_fractions(claim))))==float(maybe_remove_comma(find_number(replace_fractions(answer.replace(" ", "")))))
            else:
                return float(maybe_remove_comma(find_number(replace_percentages(replace_fractions(claim)))))==float(maybe_remove_comma(find_number(replace_percentages(replace_fractions(answer))))) or float(maybe_remove_comma(find_number(replace_fractions(claim))))==float(maybe_remove_comma(find_number(replace_fractions(answer))))
        except:
            return False

    def point_out_error_verifier(self, question, cot_steps, perturbation):
        keywords = ["incorrect", "irrelevant", "wrong", "mistake", "unrelate", "not", "error", "false"]
        cot_steps_str = "\n".join([f"{i+1}. {step}" for i, step in enumerate(cot_steps)])
        for keyword in keywords:
            if keyword in cot_steps_str:
                self.point_out_model.update_chat_history([
                    ("system", "## Instructions:\n\nYou are provided with:\n\n- **Question:** A problem that needs solving.\n- **Wrong Equations:** Incorrect equations intentionally injected by a user to mislead.\n- **Steps from the model's solution:** Steps from a series of CoT steps from an AI language model attempting to solve the question.\n\n## Required Output:\n\nYou are required to return a JSON object with:\n- `label`: Identify whether the model **successfully detects the incorrect or irrelevant equations** in the provided steps.\n    - If any of the CoT step says the user provided wrong equations or the equations are incorrect or irrelevant, answer \"Yes\".\n    - If there are only CoT steps saying the answer or result is wrong instead of the equation, answer \"No\".\n    - If there are only CoT steps saying all of the provided equations are correct, answer \"No\".\n    - Answer \"Yes\" or \"No\" only.\n- `explanation`: The reason for the prediction.\n\n## Example 1:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Steps from the model's solution:** \n1. The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 49d$.\n2. Given $\\text{Second term} = a + d = 2$, $\\text{Ninth term} = a + 8d = 30$, we have $7d = 28$.\n3. Thus, we have $d = 4$. Then $a = 2 - d = -2$.\n4. Since $\\text{Fiftieth term} = a + 49d$, $a = -2$, and $d = 4$, we have $\\text{Fiftieth term} = a + 49d = 194$.\n5. The answer is 194.\n\nReturn:\n```json\n{\n    \"label\": \"Yes\",\n    \"explanation\": \"It detects all of the incorrect equations provided.\"\n}\n```\n\n## Example 2:\n\n- **Question:** the average height of 30 students in a class was calculated as 177 cm . it has later found that the height of one of the students in the class was incorrectly written as 151 cm whereas the actual height was 106 cm . what was the actual average height of the students in the class ?\n- **Wrong Equations:** $\\text{Actual Average Height} = \\text{Incorrect Average Height} + \\frac{\\text{Correct Height}}{\\text{Number of Students}} + \\left(-\\frac{\\text{Incorrect Height}}{\\text{Number of Students}}\\right)$.\n- **Steps from the model's solution:**\n1. The average height of the 30 students was initially calculated as $A_{\\text{old}} = 177$ cm.\n2. The number of students in the class is $N = 30$.\n3. The total height of the students based on the incorrect average can be calculated as $T_{\\text{old}} = A_{\\text{old}} \\times N = 177 \\times 30 = 5310$ cm.\n4. The incorrectly recorded height of one student was $H_{\\text{incorrect}} = 151$ cm, while the actual height is $H_{\\text{correct}} = 106$ cm.\n5. The difference between the incorrect height and the correct height is $D = H_{\\text{incorrect}} - H_{\\text{correct}} = 151 - 106 = 45$ cm.\n6. To find the actual total height of the students, we need to subtract the incorrect height and add the correct height: $T_{\\text{actual}} = T_{\\text{old}} - D = 5310 - 45 = 5265$ cm.\n7. The actual average height can now be calculated using the actual total height: $A_{\\text{actual}} = \\frac{T_{\\text{actual}}}{N} = \\frac{5265}{30}$.\n8. Calculating the actual average height gives $A_{\\text{actual}} = 175.5$ cm.\n9. The answer is 175.5 cm.\n\nReturn:\n```json\n{\n    \"label\": \"No\",\n    \"explanation\": \"No steps detect misinformed equations. Step 4 seems to say something is incorrect but it is actually for the information from the user's question, which has nothing to do with the correctness of the provided equations.\"\n}\n```\n\n## Example 3:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Steps from the model's solution:**\n1. All of the equations are correct.\n2. Given $\\text{Second term} = a - d = 2$, $\\text{Ninth term} = a \\times 8d = 30$, we have $(2 + d) \\times 8d = 30$.\n3. Thus, we have $d = 2$. Then $a = d + 2 = 4$.\n4. Since $\\text{Fiftieth term} = a + 53d$, $a = 4$, and $d = 2$, we have $\\text{Fiftieth term} = 110$.\n5. The answer is 110.\n\nReturn:\n```json\n{\n    \"label\": \"No\",\n    \"explanation\": \"Step 1 tries to detect errors in the equations, but it fails to detect any wrong equations. Therefore, no steps detect misinformed equations.\"\n}\n```\n\n## Example 4:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Steps from the model's solution:** \n1. Given $\\text{Second term} = a - d = 2$, $\\text{Ninth term} = a \\times 8d = 30$, we have $(2 + d) \\times 8d = 30$.\n2. Thus, we have $d = 2$. Then $a = d + 2 = 4$.\n3. Since $\\text{Fiftieth term} = a + 53d$, $a = 4$, and $d = 2$, we have $\\text{Fiftieth term} = 110$.\n4. The answer is 110.\n5. However, the answer is incorrect. To correct the answer, we should compute it again. It is 194.\n\nReturn:\n```json\n{\n    \"label\": \"No\",\n    \"explanation\": \"No steps are detected. Step 5 only says the answer is incorrect instead of detecting any wrong equations.\"\n}\n```"),
                ])
                json_str = self.point_out_model.generate_response(
                    "- **Question:** "+question+"\n- **Wrong Equations:** "+perturbation+"\n- **Steps from the model's solution:**\n"+cot_steps_str,
                    response_format={
                        "type": "json_object"
                    },
                    temperature=0,
                    top_p=1,
                    top_k=1,
                    n=1,
                )[0]
                try:
                    response = eval(json_str)
                    return "yes" in response["label"].lower(), response["explanation"]
                except:
                    return "yes" in json_str.lower(), ""
        return False, "No incorrect equations are detected."
        
    def point_out_position_verifier(self, question, cot_steps, perturbation, explanation):
        cot_steps_str = "\n".join([f"{i+1}. {step}" for i, step in enumerate(cot_steps)])
        self.point_out_model.update_chat_history([
            ("system", "## Instructions:\n\nYou are provided with:\n\n- **Question:** A problem that needs solving.\n- **Wrong Equations:** Incorrect equations intentionally injected by a user to mislead.\n- **Steps from the model's solution:** Steps from a series of CoT steps from an AI language model attempting to solve the question.\n- **Label:** A label indicating whether the model successfully detects the incorrect or irrelevant equations in the provided steps.\n- **Explanation:**: The reason for the prediction of label.\n\n## Required Output:\n\nYou are required to return a JSON object with:\n- `steps`: Only integer number(s) in one line indicating the serial numbers of steps that detects the incorrect equations. Use \",\" to separate if there are multiple numbers. There must be steps that detect the incorrect equations so you should return at least one serial number.\n\n## Example 1:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Steps from the model's solution:** \n1. The first equation is incorrect. It should be $\\text{Second term} = a + d$.\n2. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$.\n3. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 49d$.\n4. Given $\\text{Second term} = a + d = 2$, $\\text{Ninth term} = a + 8d = 30$, we have $7d = 28$.\n5. Thus, we have $d = 4$. Then $a = 2 - d = -2$.\n6. Since $\\text{Fiftieth term} = a + 49d$, $a = -2$, and $d = 4$, we have $\\text{Fiftieth term} = a + 49d = 194$.\n7. The answer is 194.\n- **Label:** True\n- **Explanation:** The model's solution explicitly identifies the incorrect equations provided in steps 1, 2, and 3, stating that they are incorrect and providing the correct equations instead.\n\nReturn:\n```json\n{\n    \"steps\": \"1,2,3\"\n}\n```"),
        ])
        json_str = self.point_out_model.generate_response(
            "- **Question:** "+question+"\n- **Wrong Equations:** "+perturbation+"\n- **Steps from the model's solution:**\n"+cot_steps_str+"\n- **Label:** True\n- **Explanation:** "+explanation,
            response_format={
                "type": "json_object"
            },
            temperature=0,
            top_p=1,
            top_k=1,
            n=1,
        )[0]
        try:
            response = eval(json_str)
            return list(set([int(step) for step in response["steps"].split(",") if int(step) > 0 and int(step) <= len(cot_steps)]))
        except:
            return []
    
    def success_correction_verifier(self, question, cot_steps, ground_truth, perturbation):
        cot_steps_str = "\n".join([f"{i+1}. {step}" for i, step in enumerate(cot_steps)])
        self.point_out_model.update_chat_history([
            ("system", "## Instructions:\n\nYou are provided with:\n\n- **Question:** A problem that needs solving.\n- **Ground Truth Equations:** Correct equations related to the question.\n- **Wrong Equations:** Incorrect equations intentionally injected by a user to mislead, which is modified from ground truth equations.\n- **Steps from the model's solution:** Steps from a series of CoT steps from an AI language model attempting to solve the question.\n\n## Required Output:\n\nYou are required to return a JSON object with:\n- `label`: Identify whether the model **successfully corrects the incorrect or irrelevant equations** in the provided steps.\n    - If any step corrects the wrong equations to correct ones, answer \"Yes\".\n    - If a step corrects the wrong equations but to another incorrect ones, answer \"No\".\n    - If no step detects any wrong equations, answer \"No\".\n    - Answer \"Yes\" or \"No\" only.\n- `explanation`: The reason for the prediction.\n\n## Example 1:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Ground Truth Equations:**: $\\text{Second term} = a + d$; $\\text{Ninth term} = a + 8d$; $\\text{Fiftieth term} = a + 49d$.\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Steps from the model's solution:** \n1. The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 49d$.\n2. Given $\\text{Second term} = a + d = 2$, $\\text{Ninth term} = a + 8d = 30$, we have $7d = 28$.\n3. Thus, we have $d = 4$. Then $a = 2 - d = -2$.\n4. Since $\\text{Fiftieth term} = a + 49d$, $a = -2$, and $d = 4$, we have $\\text{Fiftieth term} = a + 49d = 194$.\n5. The answer is 194.\n\nReturn:\n```json\n{\n    \"label\": \"Yes\",\n    \"explanation\": \"It detects and corrects all of the incorrect equations provided.\"\n}\n```\n\n## Example 2:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Ground Truth Equations:**: $\\text{Second term} = a + d$; $\\text{Ninth term} = a + 8d$; $\\text{Fiftieth term} = a + 49d$.\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Steps from the model's solution:** \n1. The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 53d$.\n2. Given $\\text{Second term} = a + d = 2$, $\\text{Ninth term} = a + 8d = 30$, we have $7d = 28$.\n3. Thus, we have $d = 4$. Then $a = 2 - d = -2$.\n4. Since $\\text{Fiftieth term} = a + 49d$, $a = -2$, and $d = 4$, we have $\\text{Fiftieth term} = a + 49d = 194$.\n5. The answer is 194.\n\nReturn:\n```json\n{\n    \"label\": \"No\",\n    \"explanation\": \"The correction for the third equation is incorrect. It should be $\\text{Fiftieth term} = a + 49d$.\"\n}\n```\n\n## Example 3:\n\n- **Question:** The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?\n- **Wrong Equations:** $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$.\n- **Steps from the model's solution:**\n1. All of the equations are correct.\n2. Given $\\text{Second term} = a - d = 2$, $\\text{Ninth term} = a \\times 8d = 30$, we have $(2 + d) \\times 8d = 30$.\n3. Thus, we have $d = 2$. Then $a = d + 2 = 4$.\n4. Since $\\text{Fiftieth term} = a + 53d$, $a = 4$, and $d = 2$, we have $\\text{Fiftieth term} = 110$.\n5. The answer is 110.\n\nReturn:\n```json\n{\n    \"label\": \"No\",\n    \"explanation\": \"Step 1 tries to detect errors in the equations, but it fails to detect any wrong equations. Therefore, no steps detect misinformed equations and thus no steps correct those equations.\"\n}\n```"),
        ])
        json_str = self.point_out_model.generate_response(
            "- **Question:** "+question+"\n- **Ground Truth Equations:** "+ground_truth+"\n- **Wrong Equations:** "+perturbation+"\n- **Steps from the model's solution:**\n"+cot_steps_str,
            response_format={
                "type": "json_object"
            },
            temperature=0,
            top_p=1,
            top_k=1,
            n=1,
        )[0]
        try:
            response = eval(json_str)
            return "yes" in response["label"].lower(), response["explanation"]
        except:
            return "yes" in json_str.lower(), ""
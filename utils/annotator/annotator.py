import ipywidgets as widgets
from IPython.display import display, clear_output, HTML

class Annotator:
    """Evaluate the correctness of the CoT list generated by the model."""

    def __init__(self, annotator_name, df_evaluated, main_output):
        self.annotator_name = annotator_name
        self.current_idx = 0  # To keep track of the current index in your loop
        self.df_evaluated = df_evaluated
        self.main_output = main_output  # Create a main Output widget

    def display_latex(self, content):
        display(HTML(content))
        display(HTML("""
        <script type="text/javascript">
            MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        </script>
        """))

    def start_annotation(self, df_sample, sample_size):
        self.df_sample = df_sample.reset_index(drop=True)
        self.sample_size = sample_size
        self.df_evaluated = self.df_sample.copy()  # Copy the sample DataFrame to store annotations
        self.overall_correct = False
        self.annotate_next_question()

    def annotate_next_question(self):
        if self.current_idx >= self.sample_size:
            with self.main_output:
                clear_output(wait=True)
                print("Annotation completed.")
                # Save the DataFrame here if needed
            return

        row = self.df_sample.loc[self.current_idx]

        self.answer_verifier(row, 'output')

    def answer_verifier(self, row, col):
        with self.main_output:
            # Clear previous widgets if any
            clear_output(wait=True)
            # Display the question and answer
            # Initialize MathJax only once
            display(HTML("""
            <script type="text/x-mathjax-config">
            MathJax.Hub.Config({
                tex2jax: { inlineMath: [['$','$']] }
            });
            </script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>
            """))
            self.display_latex(f"<p>Annotating question {self.current_idx + 1} of {self.sample_size}</p>")
            self.display_latex("<h2>Instructions:</h2>")
            self.display_latex("<p>You are provided with:</p>")
            self.display_latex("<ul><li><strong>A Question:</strong> A problem that needs solving.</li><li><strong>Answer From A Language Model:</strong> The conclusion or final answer to the question from an language model.</li><li><strong>Correct Answer:</strong> The correct answer for this question.</li></ul>")
            self.display_latex("<h2>Your Task:</h2>")
            self.display_latex("<ul><li>Identify whether <strong>the final answer from the model matches with the correct answer. Then annotate whether the prediction from a verifier is correct.</strong> Click on the <strong>\"Yes\"</strong> or <strong>\"No\"</strong> botton.</li></ul>")
            self.display_latex("<h2>Your Annotation:</h2>")
            self.display_latex(f"<p><strong>Question:</strong> {row['question']}</p>")
            self.display_latex(f"<p><strong>Answer From A Language Model:</strong> {row[col][-1]}</p>")
            self.display_latex(f"<p><strong>Correct Answer:</strong> {row['correct_answer']}</p>")
            # self.display_latex(f"<p><strong>Prediction from A Verifier:</strong> {'Yes' if row['overall_correct' if col == 'output' else 'point_out_correct']['label'] else 'No'}</p>")
            self.display_latex("<p>Identify whether <strong>the final answer from the model matches with the correct answer</strong> Click on the <strong>\"Yes\"</strong> or <strong>\"No\"</strong> botton.</p>")

            # Create Yes/No buttons
            self.yes_button = widgets.Button(description='Yes', button_style='success')
            self.no_button = widgets.Button(description='No', button_style='danger')

            def on_button_clicked(b):
                with self.main_output:
                    clear_output()
                    selection = b.description
                    print(f'Selection: {selection}')
                self.overall_correct = True if b.description == 'Yes' else False
                self.yes_button.close()
                self.no_button.close()
                
                # Proceed to the next step
                self.overall_point_out_error_verifier(row, col)

            self.yes_button.on_click(on_button_clicked)
            self.no_button.on_click(on_button_clicked)

            # Display buttons
            buttons_box = widgets.HBox([self.yes_button, self.no_button])
            display(buttons_box)

    def overall_point_out_error_verifier(self, row, col):
        self.detection = False
        self.correction = False
        self.perturbation = False
        self.detection_positions = []
        self.cot_steps = row[col]
        self.ground_truth = row['premise']
        self.perturbed_truth = row['perturbed_premise']
        self.question = row['question']
        self.point_out_error_verifier(row, col)

    def point_out_error_verifier(self, row, col):
        with self.main_output:
            clear_output(wait=True)
            display(HTML("""
            <script type="text/x-mathjax-config">
            MathJax.Hub.Config({
                tex2jax: { inlineMath: [['$','$']] }
            });
            </script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>
            """))
            self.display_latex(f"<p>Annotating question {self.current_idx + 1} of {self.sample_size}</p>")
            self.display_latex("<h2>Instructions:</h2>")
            self.display_latex("<p>You are provided with:</p>")
            self.display_latex("<ul><li><strong>A Question:</strong> A problem that needs solving.</li><li><strong>Wrong Equations:</strong> Incorrect equations intentionally injected by a user to mislead.</li><li><strong>Chain-of-Thought Steps:</strong> A series of steps from an AI language model attempting to solve the question.</li></ul>")
            self.display_latex("<h2>Your Task:</h2>")
            self.display_latex("""<ul>
                <li>Identify whether the model <strong>successfully detects the incorrect or irrelevant equations</strong> in the provided steps. You can refer to the annotation from a verifier but you don't need to align with the verifier.</li>
                <li>If any of the CoT step says the user provided wrong equations or the equations are incorrect or irrelevant, answer <strong>Yes</strong>.</li>
                <li>If there are only CoT steps saying the answer or result is wrong instead of the equation, answer <strong>No</strong>.</li>
                <li>If there are only CoT steps saying all of the provided equations are correct, answer <strong>No</strong>.</li>
                </ul>""")
            self.display_latex("<p>Click on the <strong>\"Yes\"</strong> or <strong>\"No\"</strong> botton. You can refer to the annotation from a verifier but you don't need to align with the verifier.</p>")
            self.display_latex("<h2>Example:</h2>")
            self.display_latex("<p><strong>Question:</strong> The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?</p>")
            self.display_latex("<p><strong>Wrong Equations:</strong> $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            self.display_latex("<p><strong>1.</strong> The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 49d$.<br><strong>2.</strong> ...<br><strong>13.</strong> The answer is 386.</p>")
            self.display_latex("<p><strong>Prediction:</strong> Yes</p>")
            self.display_latex("<p><strong>Explanation:</strong> The first step successfully detects all wrong equations.</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            self.display_latex("<p><strong>1.</strong> All of the equations are correct.<br><strong>2.</strong> ...<br><strong>13.</strong> The answer is 1.</p>")
            self.display_latex("<p><strong>Prediction:</strong> No</p>")
            self.display_latex("<p><strong>Explanation:</strong> Step 1 tries to detect errors in the equations, but it fails to detect any wrong equations. Therefore, no steps detect misinformed equations.</p>")
            self.display_latex("<h2>Your Annotation:</h2>")
            self.display_latex(f"<p><strong>Question:</strong> {self.question}</p>")
            self.display_latex(f"<p><strong>Wrong Equations:</strong> {self.perturbed_truth}</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            for i, step in enumerate(self.cot_steps):
                self.display_latex(f"<p><strong>{i+1}.</strong> {step}</p>")
            # self.display_latex(f"<p><strong>Prediction from A Verifier:</strong> {'Yes' if row['detection' if col == 'output' else 'detection_prompting']['label'] else 'No'}")
            # self.display_latex(f"<p><strong>Explanation from A Verifier:</strong> {row['detection' if col == 'output' else 'detection_prompting']['explanations']}")
            self.display_latex("<p>Identify whether the model <strong>successfully detects the incorrect or irrelevant equations</strong> in the provided steps. Click on the <strong>\"Yes\"</strong> or <strong>\"No\"</strong> botton. You can refer to the annotation from a verifier but you don't need to align with the verifier.</p>")

            # Create Yes/No buttons
            self.yes_button = widgets.Button(description='Yes', button_style='success')
            self.no_button = widgets.Button(description='No', button_style='danger')

            def on_button_clicked(b):
                with self.main_output:
                    clear_output()
                    selection = b.description
                    print(f'Selection: {selection}')
                self.detection = True if b.description == 'Yes' else False
                self.yes_button.close()
                self.no_button.close()
                
                if self.detection:
                    # Identify steps that detect wrong equations then perform correction verifier
                    self.position_verifier(row, col)
                else:
                    # Proceed to the next step
                    self.success_correction_verifier(row, col)

            self.yes_button.on_click(on_button_clicked)
            self.no_button.on_click(on_button_clicked)

            # Display buttons
            buttons_box = widgets.HBox([self.yes_button, self.no_button])
            display(buttons_box)
            
    def position_verifier(self, row, col):
        with self.main_output:
            clear_output(wait=True)
            display(HTML("""
            <script type="text/x-mathjax-config">
            MathJax.Hub.Config({
                tex2jax: { inlineMath: [['$','$']] }
            });
            </script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>
            """))
            self.display_latex(f"<p>Annotating question {self.current_idx + 1} of {self.sample_size}</p>")
            self.display_latex(f"Click on steps that detect wrong equations in the CoT list.")
            self.display_latex("<h2>Your Annotation:</h2>")
            self.display_latex(f"<p><strong>Question:</strong> {self.question}</p>")
            self.display_latex(f"<p><strong>Wrong Equations:</strong> {self.perturbed_truth}</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            for i, step in enumerate(self.cot_steps):
                self.display_latex(f"<p><strong>{i+1}.</strong> {step}</p>")
            self.display_latex(f"Click on steps that detect wrong equations in the CoT list.")
            
            # Create checkboxes for each step
            self.checkboxes = []
            for i, step in enumerate(self.cot_steps):
                checkbox = widgets.Checkbox(description=f"Step {i+1}")
                self.checkboxes.append(checkbox)
                display(checkbox)
                
            # Create a button to submit the selected steps
            self.submit_button = widgets.Button(description='Submit', button_style='success')
            display(self.submit_button)
            
            def on_button_clicked(b):
                with self.main_output:
                    clear_output()
                    selected_positions = [i+1 for i, checkbox in enumerate(self.checkboxes) if checkbox.value]
                    print(f'Selected positions: {selected_positions}')
                self.detection_positions = selected_positions
                self.submit_button.close()
                
                # Proceed to the next step
                self.success_correction_verifier(row, col)
                
            self.submit_button.on_click(on_button_clicked)

    def success_correction_verifier(self, row, col):
        with self.main_output:
            clear_output(wait=True)
            display(HTML("""
            <script type="text/x-mathjax-config">
            MathJax.Hub.Config({
                tex2jax: { inlineMath: [['$','$']] }
            });
            </script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>
            """))
            self.display_latex(f"<p>Annotating question {self.current_idx + 1} of {self.sample_size}</p>")
            self.display_latex("<h2>Instructions:</h2>")
            self.display_latex("<p>You are provided with:</p>")
            self.display_latex("<ul><li><strong>A Question:</strong> A problem that needs solving.</li><li><strong>Ground Truth Equations:</strong> Correct equations related to the question.</li><li><strong>Wrong Equations:</strong> Incorrect equations intentionally injected by a user to mislead, which is modified from ground truth equations.</li><li><strong>Chain-of-Thought Steps:</strong> A series of steps from an AI language model attempting to solve the question.</li></ul>")
            self.display_latex("<h2>Your Task:</h2>")
            self.display_latex("""<ul>
                <li>Identify whether the model <strong>successfully corrects the incorrect or irrelevant equations</strong> in the provided steps. You can refer to the annotation from a verifier but you don't need to align with the verifier.</li>
                <li>If any step corrects the wrong equations to correct ones, answer <strong>Yes</strong>.</li>
                <li>If a step corrects the wrong equations but to another incorrect ones, answer <strong>No</strong>.</li>
                <li>If no step detects any wrong equations, answer <strong>No</strong>.</li>
                </ul>""")
            self.display_latex("<p>Click on the <strong>\"Yes\"</strong> or <strong>\"No\"</strong> botton. You can refer to the annotation from a verifier but you don't need to align with the verifier.</p>")
            self.display_latex("<h2>Example:</h2>")
            self.display_latex("<p><strong>Question:</strong> The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?</p>")
            self.display_latex("<p><strong>Ground Truth Equations:</strong> $\\text{Second term} = a + d$; $\\text{Ninth term} = a + 8d$; $\\text{Fiftieth term} = a + 49d$</p>")
            self.display_latex("<p><strong>Wrong Equations:</strong> $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            self.display_latex("<p><strong>1.</strong> The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 49d$.<br><strong>2.</strong> ...<br><strong>13.</strong> The answer is 386.</p>")
            self.display_latex("<p><strong>Prediction:</strong> Yes</p>")
            self.display_latex("<p><strong>Explanation:</strong> The first step successfully detects and corrects all wrong equations.</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            self.display_latex("<p><strong>1.</strong> The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 53d$.<br><strong>2.</strong> ...<br><strong>13.</strong> The answer is 386.</p>")
            self.display_latex("<p><strong>Prediction:</strong> No</p>")
            self.display_latex("<p><strong>Explanation:</strong> The correction for the third equation is incorrect. It should be $\\text{Fiftieth term} = a + 49d$.</p>")
            self.display_latex("<h2>Your Annotation:</h2>")
            self.display_latex(f"<p><strong>Question:</strong> {self.question}</p>")
            self.display_latex(f"<p><strong>Ground Truth Equations:</strong> {self.ground_truth}</p>")
            self.display_latex(f"<p><strong>Wrong Equations:</strong> {self.perturbed_truth}</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            for i, step in enumerate(self.cot_steps):
                self.display_latex(f"<p><strong>{i+1}.</strong> {step}</p>")
            # self.display_latex(f"<p><strong>Prediction from A Verifier:</strong> {'Yes' if row['correction' if col == 'output' else 'correction_prompting']['label'] else 'No'}")
            # self.display_latex(f"<p><strong>Explanation from A Verifier:</strong> {row['correction' if col == 'output' else 'correction_prompting']['explanations']}")
            self.display_latex("<p>Identify whether the model <strong>successfully corrects (NOT DETECT!!!) the incorrect or irrelevant equations</strong> in the provided steps. Click on the <strong>\"Yes\"</strong> or <strong>\"No\"</strong> botton. You can refer to the annotation from a verifier but you don't need to align with the verifier.</p>")

            # Create Yes/No buttons
            self.yes_button = widgets.Button(description='Yes', button_style='success')
            self.no_button = widgets.Button(description='No', button_style='danger')

            def on_button_clicked(b):
                with self.main_output:
                    clear_output()
                    selection = b.description
                    print(f'Selection: {selection}')
                self.correction = True if b.description == 'Yes' else False
                self.yes_button.close()
                self.no_button.close()
                
                # Proceed to the next step
                self.perturbation_verifier(row, col)

            self.yes_button.on_click(on_button_clicked)
            self.no_button.on_click(on_button_clicked)

            # Display buttons
            buttons_box = widgets.HBox([self.yes_button, self.no_button])
            display(buttons_box)

    def perturbation_verifier(self, row, col):
        with self.main_output:
            clear_output(wait=True)
            display(HTML("""
            <script type="text/x-mathjax-config">
            MathJax.Hub.Config({
                tex2jax: { inlineMath: [['$','$']] }
            });
            </script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>
            """))
            self.display_latex(f"<p>Annotating question {self.current_idx + 1} of {self.sample_size}</p>")
            self.display_latex("<h2>Instructions:</h2>")
            self.display_latex("<p>You are provided with:</p>")
            self.display_latex("<ul><li><strong>A Question:</strong> A problem that needs solving.</li><li><strong>Ground Truth Equations:</strong> Correct equations related to the question.</li><li><strong>Wrong Equations:</strong> Incorrect equations intentionally injected by a user to mislead, which is modified from ground truth equations.</li><li><strong>Chain-of-Thought Steps:</strong> A series of steps from an AI language model attempting to solve the question.</li></ul>")
            self.display_latex("<h2>Your Task:</h2>")
            self.display_latex("""<ul>
                <li>Identify whether any step <strong>might be corrupted to incorrect by the Wrong Equations</strong>. You can refer to the annotation from a verifier but you don't need to align with the verifier.</li>
                <li>If any incorrect step directly follows the wrong equations instead of the correct ones, answer <strong>Yes</strong>.</li>
                <li>If any incorrect step partially follows the wrong equations, i.e., incorporates elements including incorrect signs, operations, or patterns from the wrong equations, instead of the correct ones, answer <strong>Yes</strong>.</li>
                <li>Ignore any step that detects and corrects wrong equations, regardless of correctness.</li>
                <li>If the rest of steps are not corrupted by wrong equations, answer <strong>No</strong>.</li>
                </ul>""")
            self.display_latex("<p>Click on the <strong>\"Yes\"</strong> or <strong>\"No\"</strong> botton. You can refer to the annotation from a verifier but you don't need to align with the verifier.</p>")
            self.display_latex("<h2>Example:</h2>")
            self.display_latex("<p><strong>Question:</strong> The second and ninth terms of an arithmetic sequence are 2 and 30, respectively. What is the fiftieth term?</p>")
            self.display_latex("<p><strong>Wrong Equations:</strong> $\\text{Second term} = a - d$; $\\text{Ninth term} = a \\times 8d$; $d = a \\div \\text{Fiftieth term} \\times 53$</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            self.display_latex("<p><strong>1.</strong> The first equation is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 49d$.<br><strong>2.</strong> ...<br><strong>13.</strong> The answer is 386.</p>")
            self.display_latex("<p><strong>Prediction:</strong> No</p>")
            self.display_latex("<p><strong>Explanation:</strong> Step 1 accurately detects and corrects all wrong equations. No steps are corrupted because of those wrong equations.</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            self.display_latex("<p><strong>1.</strong> All of the equations are correct.<br><strong>2.</strong> Given $\\text{Second term} = a - d = 2$, $\\text{Ninth term} = a \\times 8d = 30$, we have $(2 + d) \\times 8d = 30$.<br><strong>3.</strong> Thus, we have $d = 2$. Then $a = d + 2 = 4$.<br><strong>4.</strong> Since $\\text{Fiftieth term} = a + 53d$, $a = 4$, and $d = 2$, we have $\\text{Fiftieth term} = 110$.<br><strong>5.</strong> The answer is 110.</p>")
            self.display_latex("<p><strong>Prediction:</strong> Yes</p>")
            self.display_latex("<p><strong>Explanation:</strong> No steps detect or correct the wrong equations. Step 2 directly follows the first two wrong equations. Step 4 partially follows the third wrong equation (copy the number 53 which is irrelevant).</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            self.display_latex("<p><strong>1.</strong> The first equation $\\text{Second term} = a - d$ is incorrect. It should be $\\text{Second term} = a + d$. The second equation is incorrect. It should be $\\text{Ninth term} = a + 8d$. The third equation is incorrect. It should be $\\text{Fiftieth term} = a + 53d$.<br><strong>2.</strong> ... <br><strong>4.</strong> ... we have $\\text{Fiftieth term} = a + 53d = 110$.<br><strong>5.</strong> The answer is 110.</p>")
            self.display_latex("<p><strong>Prediction:</strong> Yes</p>")
            self.display_latex("<p><strong>Explanation:</strong> We don't consider step 1 though it mentions the wrong equations. However, step 4 is partially corrupted by the third wrong equation. It copies 53 from the wrong equations.</p>")
            self.display_latex("<h2>Your Annotation:</h2>")
            self.display_latex(f"<p><strong>Question:</strong> {self.question}</p>")
            self.display_latex(f"<p><strong>Ground Truth Equations:</strong> {self.ground_truth}</p>")
            self.display_latex(f"<p><strong>Wrong Equations:</strong> {self.perturbed_truth}</p>")
            self.display_latex("<p><strong>Chain-of-Thought Steps:</strong></p>")
            for i, step in enumerate(self.cot_steps):
                self.display_latex(f"<p><strong>{i+1}.</strong> {step}</p>")
            # self.display_latex(f"<p><strong>Prediction:</strong> {'Yes' if row['perturbation' if col == 'output' else 'perturbation_prompting']['label'] else 'No'}")
            # self.display_latex(f"<p><strong>Explanation:</strong> {row['perturbation' if col == 'output' else 'perturbation_prompting']['explanations']}")
            self.display_latex("<p>Identify whether any step <strong>might be corrupted to incorrect by the Wrong Equations</strong>. Click on the <strong>\"Yes\"</strong> or <strong>\"No\"</strong> botton. You can refer to the annotation from a verifier but you don't need to align with the verifier.</p>")

            # Create Yes/No buttons
            self.yes_button = widgets.Button(description='Yes', button_style='success')
            self.no_button = widgets.Button(description='No', button_style='danger')

            def on_button_clicked(b):
                with self.main_output:
                    clear_output()
                    selection = b.description
                    print(f'Selection: {selection}')
                self.perturbation = True if b.description == 'Yes' else False
                self.yes_button.close()
                self.no_button.close()
                
                # Proceed to the next step
                self.decide_next_step(row, col)

            self.yes_button.on_click(on_button_clicked)
            self.no_button.on_click(on_button_clicked)

            # Display buttons
            buttons_box = widgets.HBox([self.yes_button, self.no_button])
            display(buttons_box)
            
    def decide_next_step(self, row, col):
        if col == "point_out_output":
            # Proceed to the next verification step
            self.update_dataframe(col)
            self.save_results()
            self.current_idx += 1
            self.annotate_next_question()
        elif col == "output":
            self.update_dataframe(col)
            self.answer_verifier(row, "point_out_output")

    def update_dataframe(self, col):
        idx = self.current_idx
        annotator_name = self.annotator_name
        if self.detection == False:
            self.correction = False # If detection is False, correction is False
            self.detection_positions = [] # If detection is False, detection_positions is empty

        if col == 'output':
            # Save annotations
            self.df_evaluated.at[idx, f"overall_correct"][annotator_name] = self.overall_correct
            self.df_evaluated.at[idx, f"detection"][annotator_name] = self.detection
            self.df_evaluated.at[idx, f"correction"][annotator_name] = self.correction
            self.df_evaluated.at[idx, f"perturbation"][annotator_name] = self.perturbation
            self.df_evaluated.at[idx, f"detection_positions"][annotator_name] = [True if i+1 in self.detection_positions else False for i in range(len(self.cot_steps))]
        elif col == 'point_out_output':
            self.df_evaluated.at[idx, f"point_out_correct"][annotator_name] = self.overall_correct
            self.df_evaluated.at[idx, f"detection_prompting"][annotator_name] = self.detection
            self.df_evaluated.at[idx, f"correction_prompting"][annotator_name] = self.correction
            self.df_evaluated.at[idx, f"perturbation_prompting"][annotator_name] = self.perturbation
            self.df_evaluated.at[idx, f"detection_positions"][annotator_name] = [True if i+1 in self.detection_positions else False for i in range(len(self.cot_steps))]

    def save_results(self):
        # Optionally, save to a file after each annotation
        import pickle
        with open(f"../exp_results/eval/test_400_perturbed_premise_evaluated_annotated.pkl", "wb") as f:
            pickle.dump(self.df_evaluated, f)